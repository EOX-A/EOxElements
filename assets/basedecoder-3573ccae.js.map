{"version":3,"file":"basedecoder-3573ccae.js","sources":["../../node_modules/geotiff/dist-module/predictor.js","../../node_modules/geotiff/dist-module/compression/basedecoder.js"],"sourcesContent":["function decodeRowAcc(row, stride) {\n  let length = row.length - stride;\n  let offset = 0;\n  do {\n    for (let i = stride; i > 0; i--) {\n      row[offset + stride] += row[offset];\n      offset++;\n    }\n\n    length -= stride;\n  } while (length > 0);\n}\n\nfunction decodeRowFloatingPoint(row, stride, bytesPerSample) {\n  let index = 0;\n  let count = row.length;\n  const wc = count / bytesPerSample;\n\n  while (count > stride) {\n    for (let i = stride; i > 0; --i) {\n      row[index + stride] += row[index];\n      ++index;\n    }\n    count -= stride;\n  }\n\n  const copy = row.slice();\n  for (let i = 0; i < wc; ++i) {\n    for (let b = 0; b < bytesPerSample; ++b) {\n      row[(bytesPerSample * i) + b] = copy[((bytesPerSample - b - 1) * wc) + i];\n    }\n  }\n}\n\nexport function applyPredictor(block, predictor, width, height, bitsPerSample,\n  planarConfiguration) {\n  if (!predictor || predictor === 1) {\n    return block;\n  }\n\n  for (let i = 0; i < bitsPerSample.length; ++i) {\n    if (bitsPerSample[i] % 8 !== 0) {\n      throw new Error('When decoding with predictor, only multiple of 8 bits are supported.');\n    }\n    if (bitsPerSample[i] !== bitsPerSample[0]) {\n      throw new Error('When decoding with predictor, all samples must have the same size.');\n    }\n  }\n\n  const bytesPerSample = bitsPerSample[0] / 8;\n  const stride = planarConfiguration === 2 ? 1 : bitsPerSample.length;\n\n  for (let i = 0; i < height; ++i) {\n    // Last strip will be truncated if height % stripHeight != 0\n    if (i * stride * width * bytesPerSample >= block.byteLength) {\n      break;\n    }\n    let row;\n    if (predictor === 2) { // horizontal prediction\n      switch (bitsPerSample[0]) {\n        case 8:\n          row = new Uint8Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n          );\n          break;\n        case 16:\n          row = new Uint16Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 2,\n          );\n          break;\n        case 32:\n          row = new Uint32Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 4,\n          );\n          break;\n        default:\n          throw new Error(`Predictor 2 not allowed with ${bitsPerSample[0]} bits per sample.`);\n      }\n      decodeRowAcc(row, stride, bytesPerSample);\n    } else if (predictor === 3) { // horizontal floating point\n      row = new Uint8Array(\n        block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n      );\n      decodeRowFloatingPoint(row, stride, bytesPerSample);\n    }\n  }\n  return block;\n}\n","import { applyPredictor } from '../predictor.js';\n\nexport default class BaseDecoder {\n  async decode(fileDirectory, buffer) {\n    const decoded = await this.decodeBlock(buffer);\n    const predictor = fileDirectory.Predictor || 1;\n    if (predictor !== 1) {\n      const isTiled = !fileDirectory.StripOffsets;\n      const tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;\n      const tileHeight = isTiled ? fileDirectory.TileLength : (\n        fileDirectory.RowsPerStrip || fileDirectory.ImageLength\n      );\n      return applyPredictor(\n        decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample,\n        fileDirectory.PlanarConfiguration,\n      );\n    }\n    return decoded;\n  }\n}\n"],"names":["decodeRowAcc","row","stride","length","offset","i","decodeRowFloatingPoint","bytesPerSample","index","count","wc","copy","b","applyPredictor","block","predictor","width","height","bitsPerSample","planarConfiguration","BaseDecoder","fileDirectory","buffer","decoded","isTiled","tileWidth","tileHeight"],"mappings":"AAAA,SAASA,EAAaC,EAAKC,EAAQ,CACjC,IAAIC,EAASF,EAAI,OAASC,EACtBE,EAAS,EACb,EAAG,CACD,QAASC,EAAIH,EAAQG,EAAI,EAAGA,IAC1BJ,EAAIG,EAASF,CAAM,GAAKD,EAAIG,CAAM,EAClCA,IAGFD,GAAUD,CACd,OAAWC,EAAS,EACpB,CAEA,SAASG,EAAuBL,EAAKC,EAAQK,EAAgB,CAC3D,IAAIC,EAAQ,EACRC,EAAQR,EAAI,OAChB,MAAMS,EAAKD,EAAQF,EAEnB,KAAOE,EAAQP,GAAQ,CACrB,QAASG,EAAIH,EAAQG,EAAI,EAAG,EAAEA,EAC5BJ,EAAIO,EAAQN,CAAM,GAAKD,EAAIO,CAAK,EAChC,EAAEA,EAEJC,GAASP,CACV,CAED,MAAMS,EAAOV,EAAI,QACjB,QAASI,EAAI,EAAGA,EAAIK,EAAI,EAAEL,EACxB,QAASO,EAAI,EAAGA,EAAIL,EAAgB,EAAEK,EACpCX,EAAKM,EAAiBF,EAAKO,CAAC,EAAID,GAAOJ,EAAiBK,EAAI,GAAKF,EAAML,CAAC,CAG9E,CAEO,SAASQ,EAAeC,EAAOC,EAAWC,EAAOC,EAAQC,EAC9DC,EAAqB,CACrB,GAAI,CAACJ,GAAaA,IAAc,EAC9B,OAAOD,EAGT,QAAST,EAAI,EAAGA,EAAIa,EAAc,OAAQ,EAAEb,EAAG,CAC7C,GAAIa,EAAcb,CAAC,EAAI,IAAM,EAC3B,MAAM,IAAI,MAAM,sEAAsE,EAExF,GAAIa,EAAcb,CAAC,IAAMa,EAAc,CAAC,EACtC,MAAM,IAAI,MAAM,oEAAoE,CAEvF,CAED,MAAMX,EAAiBW,EAAc,CAAC,EAAI,EACpChB,EAASiB,IAAwB,EAAI,EAAID,EAAc,OAE7D,QAASb,EAAI,EAAGA,EAAIY,GAEd,EAAAZ,EAAIH,EAASc,EAAQT,GAAkBO,EAAM,YAFvB,EAAET,EAAG,CAK/B,IAAIJ,EACJ,GAAIc,IAAc,EAAG,CACnB,OAAQG,EAAc,CAAC,EAAC,CACtB,IAAK,GACHjB,EAAM,IAAI,WACRa,EAAOT,EAAIH,EAASc,EAAQT,EAAgBL,EAASc,EAAQT,CACzE,EACU,MACF,IAAK,IACHN,EAAM,IAAI,YACRa,EAAOT,EAAIH,EAASc,EAAQT,EAAgBL,EAASc,EAAQT,EAAiB,CAC1F,EACU,MACF,IAAK,IACHN,EAAM,IAAI,YACRa,EAAOT,EAAIH,EAASc,EAAQT,EAAgBL,EAASc,EAAQT,EAAiB,CAC1F,EACU,MACF,QACE,MAAM,IAAI,MAAM,gCAAgCW,EAAc,CAAC,CAAC,mBAAmB,CACtF,CACDlB,EAAaC,EAAKC,CAAsB,CAC9C,MAAea,IAAc,IACvBd,EAAM,IAAI,WACRa,EAAOT,EAAIH,EAASc,EAAQT,EAAgBL,EAASc,EAAQT,CACrE,EACMD,EAAuBL,EAAKC,EAAQK,CAAc,EAErD,CACD,OAAOO,CACT,CCrFe,MAAMM,CAAY,CAC/B,MAAM,OAAOC,EAAeC,EAAQ,CAClC,MAAMC,EAAU,MAAM,KAAK,YAAYD,CAAM,EACvCP,EAAYM,EAAc,WAAa,EAC7C,GAAIN,IAAc,EAAG,CACnB,MAAMS,EAAU,CAACH,EAAc,aACzBI,EAAYD,EAAUH,EAAc,UAAYA,EAAc,WAC9DK,EAAaF,EAAUH,EAAc,WACzCA,EAAc,cAAgBA,EAAc,YAE9C,OAAOR,EACLU,EAASR,EAAWU,EAAWC,EAAYL,EAAc,cACzDA,EAAc,mBACtB,CACK,CACD,OAAOE,CACR,CACH","x_google_ignoreList":[0,1]}