{"version":3,"file":"drawtools.stories-PWJl1ZLU.js","sources":["../../node_modules/lit-html/directives/keyed.js","../../elements/drawtools/src/style.eox.js","../../elements/drawtools/src/methods/list/first-update.js","../../elements/drawtools/src/methods/list/hover-feature.js","../../elements/drawtools/src/methods/list/delete-feature.js","../../elements/drawtools/src/enums/stories.js","../../elements/drawtools/src/enums/draw.js","../../elements/drawtools/src/methods/list/select-deselect-feature.js","../../elements/drawtools/src/components/list.js","../../elements/drawtools/src/methods/controller/update-button-states.js","../../elements/drawtools/src/components/controller.js","../../elements/drawtools/src/style.js","../../elements/drawtools/src/methods/draw/on-draw-end.js","../../elements/drawtools/src/methods/draw/start-drawing.js","../../elements/drawtools/src/methods/draw/init-draw-layer.js","../../elements/drawtools/src/methods/draw/discard-drawing.js","../../elements/drawtools/src/methods/draw/emit-drawn-features.js","../../elements/drawtools/src/main.js","../../elements/drawtools/stories/primary.js","../../elements/drawtools/stories/draw-type.js","../../elements/drawtools/stories/multi-polygon.js","../../elements/drawtools/stories/modify-features.js","../../elements/drawtools/stories/multi-polygon-list.js"],"sourcesContent":["import{nothing as r}from\"../lit-html.js\";import{directive as t,Directive as e}from\"../directive.js\";import{setCommittedValue as s}from\"../directive-helpers.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const i=t(class extends e{constructor(){super(...arguments),this.key=r}render(r,t){return this.key=r,t}update(r,[t,e]){return t!==this.key&&(s(r),this.key=t),e}});export{i as keyed};\n//# sourceMappingURL=keyed.js.map\n","import { button } from \"../../../utils/styles/button\";\n\nexport const styleEOX = `\n  * {\n    font-family: Roboto, sans-serif;\n  }\n\n  ${button}\n\n  button.discard:before {\n    content: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23FF5252' viewBox='0 0 24 24'%3E%3Ctitle%3Etrash-can-outline%3C/title%3E%3Cpath d='M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z' /%3E%3C/svg%3E\")\n  }\n\n  button.polygon:before {\n    content: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23004170' viewBox='0 0 24 24'%3E%3Ctitle%3Eshape-polygon-plus%3C/title%3E%3Cpath d='M17,15.7V13H19V17L10,21L3,14L7,5H11V7H8.3L5.4,13.6L10.4,18.6L17,15.7M22,5V7H19V10H17V7H14V5H17V2H19V5H22Z' /%3E%3C/svg%3E\");\n  }\n  ul {\n    padding: 0;\n  }\n  ul ul {\n    padding-left: 48px;\n  }\n  li:hover {\n    background: #f0f5f9;\n  }\n  li.selected {\n    background: #f0f5f9;\n  }\n  li {\n    list-style: none;\n    padding: 4px;\n  }\n  li {\n    border-bottom: 1px solid #0041703a;\n  }\n  li:first-child {\n    border-top: 1px solid #0041703a;\n  }\n  li.sortable-chosen {\n    background: #eeea;\n  }\n  li.sortable-drag {\n    opacity: 0;\n  }\n  li.sortable-ghost {\n  }\n  button.small.icon, button.small.icon::before {\n    height: 16px;\n    width: 16px;\n    padding: 0px;\n  }\n  button.discard.icon {\n    opacity: .7;\n  }\n  button.discard.icon:hover {\n    opacity: 1;\n  }\n  eox-drawtools-list {\n    width: 100%;\n  }\n  .list {\n    width: 100%;\n    align-items: center;\n    justify-content: space-between;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    font-size: small;\n    gap: 10px;\n\n  }\n  label {\n    gap: 10px;\n  }\n  label, span {\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    font-size: small;\n    flex-grow: 1;\n  }\n`;\n","/**\n * Handles initial settings and event triggers upon the component's first update.\n *\n * @param {import(\"../../components/list\").EOxDrawToolsList} EoxDrawToolList - The list of drawn features.\n */\nconst firstUpdatedMethod = (EoxDrawToolList) => {\n  // Set hover and click interactions\n  // Assign the hover and click interactions from eoxMap to respective variables in EoxDrawToolList\n  EoxDrawToolList.hoverInteraction =\n    EoxDrawToolList.eoxMap.selectInteractions[\"selectHover\"];\n  EoxDrawToolList.clickInteraction =\n    EoxDrawToolList.eoxMap.selectInteractions[\"selectClick\"];\n\n  // Function to trigger an update when the style changes due to interaction\n  const handleInteractionStyleChange = () => {\n    EoxDrawToolList.requestUpdate();\n  };\n\n  // Event triggers for style change due to interaction\n  // Add listeners for style change in both hover and click interactions\n  EoxDrawToolList.hoverInteraction.selectStyleLayer.on(\n    \"change\",\n    handleInteractionStyleChange\n  );\n  EoxDrawToolList.clickInteraction.selectStyleLayer.on(\n    \"change\",\n    handleInteractionStyleChange\n  );\n};\n\nexport default firstUpdatedMethod;\n","/**\n * Handles the hover effect on a feature within the list.\n *\n * @param {import(\"../../components/list\").EOxDrawToolsList} EoxDrawToolList - The list of drawn features.\n * @param {Number} featureId - The ID of the feature to hover.\n * @param {Boolean} mouseOut - Flag indicating mouse out event.\n */\nconst hoverFeatureMethod = (EoxDrawToolList, featureId, mouseOut) => {\n  // Check if the feature is currently clicked; if so, don't perform hover effect\n  if (EoxDrawToolList.clickId === featureId) return;\n\n  // Apply or remove hover effect based on mouse in/out event\n  const featuresToHighlight = mouseOut ? [] : [featureId]; // Create an array of feature IDs to highlight\n  EoxDrawToolList.hoverInteraction.highlightById(featuresToHighlight); // Apply hover effect\n};\n\nexport default hoverFeatureMethod;\n","/**\n * Deletes a feature when clicked on the delete button.\n *\n * @param {Event & { target: HTMLButtonElement }} evt - Event object containing button target.\n * @param {import(\"../../components/list\").EOxDrawToolsList} EoxDrawToolList - The list of drawn features.\n */\nconst deleteFeatureMethod = (evt, EoxDrawToolList) => {\n  evt.stopPropagation();\n\n  // Extract the index of the feature to delete from the button's attribute\n  const index = Number(evt.target.getAttribute(\"index\"));\n\n  // Retrieve the feature to be deleted from the drawnFeatures array\n  const feature = EoxDrawToolList.drawnFeatures[index];\n\n  // Remove the feature from the draw layer and update the drawnFeatures array\n  EoxDrawToolList.drawLayer.getSource().removeFeature(feature);\n  EoxDrawToolList.drawnFeatures.splice(index, 1);\n\n  // Request an update to reflect the changes\n  EoxDrawToolList.requestUpdate();\n};\n\nexport default deleteFeatureMethod;\n","export const STORIES_LAYERS_ARRAY = [\n  {\n    type: \"Tile\",\n    source: {\n      type: \"OSM\",\n    },\n  },\n];\n\nexport const STORIES_MAP_STYLE = \"width: 400px; height: 300px;\";\n\nexport const STORIES_DRAW_TYPES = [\n  { id: \"box\", type: \"Box\" },\n  { id: \"point\", type: \"Point\" },\n  { id: \"circle\", type: \"Circle\" },\n  { id: \"linestring\", type: \"LineString\" },\n];\n","export const FIT_OPTIONS = { duration: 750 };\n","import { FIT_OPTIONS } from \"../../enums\";\n\n/**\n * Handles selecting and deselecting a feature on the map.\n *\n * @param {import(\"ol\").Feature} feature - The selected feature.\n * @param {import(\"../../components/list\").EOxDrawToolsList} EoxDrawToolList - The list of drawn features.\n */\nconst selectAndDeselectFeature = (feature, EoxDrawToolList) => {\n  const selectedFeatureId = feature.get(\"id\");\n  const { clickId, drawLayer, olMap, clickInteraction } = EoxDrawToolList;\n\n  const isSelectedFeature = clickId === selectedFeatureId;\n  const featureGeometry = feature.getGeometry();\n\n  if (isSelectedFeature) {\n    // Deselect the selected feature and fit the view to its extent\n    const newExtent = drawLayer.getSource().getExtent();\n    olMap.getView().fit(newExtent, FIT_OPTIONS);\n    clickInteraction.highlightById([]);\n  } else {\n    // Select the clicked feature and fit the view to its extent\n    const featureExtent = featureGeometry.getExtent();\n    clickInteraction.highlightById([selectedFeatureId]);\n    olMap.getView().fit(featureExtent, FIT_OPTIONS);\n  }\n\n  EoxDrawToolList.requestUpdate();\n};\n\nexport default selectAndDeselectFeature;\n","import { LitElement, html, nothing } from \"lit\";\nimport { keyed } from \"lit/directives/keyed.js\";\nimport { styleEOX } from \"../style.eox\";\nimport {\n  deleteFeatureMethod,\n  firstUpdatedMethod,\n  hoverFeatureMethod,\n  selectAndDeselectFeatureMethod,\n} from \"../methods/list\";\n\n/**\n * Display list of features\n *\n * @element eox-drawtools-list\n */\nexport class EOxDrawToolsList extends LitElement {\n  static properties = {\n    eoxMap: { attribute: false, state: true },\n    olMap: { attribute: false, state: true },\n    draw: { attribute: false, state: true },\n    drawLayer: { attribute: false, state: true },\n    drawnFeatures: { attribute: false, state: true, type: Array },\n    modify: { attribute: false, state: true },\n    unstyled: { type: Boolean },\n  };\n\n  /**\n   * @type import(\"../../../map/src/select\").EOxSelectInteraction\n   */\n  hoverInteraction;\n\n  /**\n   * @type import(\"../../../map/src/select\").EOxSelectInteraction\n   */\n  clickInteraction;\n\n  /**\n   * @type string | number\n   */\n  hoverId;\n\n  /**\n   * @type string | number\n   */\n  clickId;\n\n  constructor() {\n    super();\n\n    /**\n     * @type import(\"../../../map/main\").EOxMap\n     */\n    this.eoxMap = null;\n\n    /**\n     * @type import(\"ol\").Map\n     */\n    this.olMap = null;\n\n    /**\n     * The current native OpenLayers `draw` interaction\n     * @type import(\"ol/interaction\").Draw\n     */\n\n    this.draw = null;\n\n    /**\n     * The current native OpenLayers draw `layer`\n     * @type import(\"ol/layer\").Vector<import(\"ol/source\").Vector>\n     */\n\n    this.drawLayer = null;\n\n    /**\n     * The array of drawn native OpenLayers features. Normally includes only one feature,\n     * until multiple feature drawing is enabled.\n     *\n     * @type Array<import(\"ol\").Feature>\n     */\n    this.drawnFeatures = [];\n\n    /**\n     * The current native OpenLayers `modify` interaction\n     * @type import(\"ol/interaction\").Modify\n     */\n\n    this.modify = null;\n\n    /**\n     * Render the element without additional styles\n     */\n    this.unstyled = false;\n  }\n\n  /**\n   * Handles the deletion of an individual feature.\n   *\n   * @param {Event & { target: HTMLButtonElement }} evt - Event object containing button target.\n   */\n  _handleDelete(evt) {\n    deleteFeatureMethod(evt, this);\n  }\n\n  /**\n   * Handles the selection and deselection of a feature from the list.\n   *\n   * @param {import(\"ol\").Feature} feature - The selected feature.\n   */\n  _handleFeatureSelectAndDeselect(feature) {\n    selectAndDeselectFeatureMethod(feature, this);\n  }\n\n  /**\n   *\n   * @param {Number} featureId - The ID of the feature to hover.\n   * @param {Boolean} mouseOut - Flag indicating mouse out event.\n   */\n  _handleHoverFeature(featureId, mouseOut = false) {\n    hoverFeatureMethod(this, featureId, mouseOut);\n  }\n\n  /**\n   * Initiates initial settings and event triggers upon the component's first update.\n   */\n  firstUpdated() {\n    firstUpdatedMethod(this);\n  }\n\n  render() {\n    // Update hover and click IDs\n    this.hoverId = this.hoverInteraction?.selectedFids[0];\n    this.clickId = this.clickInteraction?.selectedFids[0];\n\n    return html`\n      <style>\n        ${!this.unstyled && styleEOX}\n      </style>\n      <ul>\n        ${this.drawnFeatures.map((feature, i) => {\n          // Determine feature number and ID\n          const featureNumber = i + 1;\n          const featureId = feature.get(\"id\");\n\n          // Check if the feature is hovered or clicked\n          const isFeatureHovered = this.hoverId === featureId;\n          const isFeatureClicked = this.clickId === featureId;\n          const isSelected = isFeatureHovered || isFeatureClicked;\n          const selectionClass = isSelected ? \"selected\" : nothing;\n\n          return keyed(\n            featureNumber,\n            html`\n              <li\n                class=\"${selectionClass}\"\n                @mouseover=${() => this._handleHoverFeature(featureId)}\n                @mouseout=${() => this._handleHoverFeature(featureId, true)}\n              >\n                <div\n                  class=\"list\"\n                  @click=\"${() =>\n                    this._handleFeatureSelectAndDeselect(feature)}\"\n                >\n                  <span class=\"title\">Feature #${featureNumber}</span>\n                  <button\n                    index=${i}\n                    class=\"icon small discard\"\n                    @click=\"${this._handleDelete}\"\n                  ></button>\n                </div>\n              </li>\n            `\n          );\n        })}\n      </ul>\n    `;\n  }\n}\n\ncustomElements.define(\"eox-drawtools-list\", EOxDrawToolsList);\n","/**\n * Update button state of draw and discard buttons based on specific conditions.\n *\n * @param {import(\"../../components/controller\").EOxDrawToolsController} EoxDrawToolController - The controller instance.\n * @returns {{ drawDisabled: boolean | import(\"lit\").nothing, discardDisabled: boolean | import(\"lit\").nothing }} - The updated button states.\n */\nconst updateButtonStatesMethod = (EoxDrawToolController) => {\n  // Destructure relevant properties from the controller\n  const { multipleFeatures, drawnFeatures, currentlyDrawing } =\n    EoxDrawToolController;\n\n  // Determine draw button's disabled state based on conditions\n  const drawDisabled =\n    (!multipleFeatures && drawnFeatures?.length > 0) || currentlyDrawing;\n\n  // Determine discard button's disabled state based on conditions\n  const discardDisabled = !drawnFeatures?.length && !currentlyDrawing;\n\n  // Return the updated button states\n  return { drawDisabled, discardDisabled };\n};\n\nexport default updateButtonStatesMethod;\n","import { LitElement, html, nothing } from \"lit\";\nimport { styleEOX } from \"../style.eox\";\nimport { updateButtonStatesMethod } from \"../methods/controller\";\n\n/**\n * Controller component for drawing features\n *\n * @element eox-drawtools-controller\n */\nexport class EOxDrawToolsController extends LitElement {\n  // Define properties with default values and types\n  static properties = {\n    multipleFeatures: { attribute: false, type: Boolean },\n    drawnFeatures: { attribute: false, state: true, type: Array },\n    currentlyDrawing: { attribute: false, state: true, type: Boolean },\n    drawFunc: { attribute: false, type: Object },\n    unstyled: { type: Boolean },\n  };\n\n  /**\n   * @type boolean | import(\"lit\").nothing\n   */\n  #drawDisabled = true;\n\n  /**\n   * @type boolean | import(\"lit\").nothing\n   */\n  #discardDisabled = true;\n\n  constructor() {\n    super();\n\n    /**\n     * Allow adding more than one feature at a time\n     */\n    this.multipleFeatures = false;\n\n    /**\n     * The array of drawn native OpenLayers features. Normally includes only one feature,\n     * until multiple feature drawing is enabled.\n     *\n     * @type Array<import(\"ol\").Feature>\n     */\n    this.drawnFeatures = [];\n\n    /**\n     * Whether the user is currently in the process of drawing or not\n     */\n    this.currentlyDrawing = false;\n\n    /**\n     * List of draw function object like start, discard etc.\n     */\n    this.drawFunc = null;\n\n    /**\n     * Render the element without additional styles\n     */\n    this.unstyled = false;\n  }\n\n  /**\n   * Updates button states based on conditions\n   */\n  updateButtonStates() {\n    const { drawDisabled, discardDisabled } = updateButtonStatesMethod(this);\n\n    this.#drawDisabled = drawDisabled;\n    this.#discardDisabled = discardDisabled;\n  }\n\n  render() {\n    this.updateButtonStates();\n    const drawLabel = this.currentlyDrawing ? \"drawing\" : \"draw\";\n\n    return html`\n      <style>\n        ${!this.unstyled && styleEOX}\n      </style>\n      <div>\n        <slot></slot>\n\n        <!-- Draw Button -->\n        <button\n          data-cy=\"drawBtn\"\n          class=\"polygon icon\"\n          ?disabled=\"${this.#drawDisabled || nothing}\"\n          @click=\"${() => this.drawFunc.start()}\"\n        >\n          ${drawLabel}\n        </button>\n\n        <!-- Discard Button -->\n        <button\n          data-cy=\"discardBtn\"\n          class=\"discard icon\"\n          ?disabled=\"${this.#discardDisabled || nothing}\"\n          @click=\"${() => this.drawFunc.discard()}\"\n        >\n          discard\n        </button>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define(\"eox-drawtools-controller\", EOxDrawToolsController);\n","export const style = `\n:host {\n  display: block;\n}\n`;\n","/**\n * Handles actions after drawing ends -\n * emits drawn features, deactivates drawing, and requests an update.\n *\n * @param {import(\"../../main\").EOxDrawTools} EoxDrawTool - The drawing tool instance.\n */\nconst onDrawEndMethod = (EoxDrawTool) => {\n  // Function to handle actions when drawing ends\n  const handleDrawEnd = () => {\n    EoxDrawTool.emitDrawnFeatures(); // Emit drawn features\n    EoxDrawTool.draw.setActive(false); // Deactivate drawing\n    EoxDrawTool.currentlyDrawing = false; // Update drawing status flag\n  };\n\n  // Execute actions on draw end\n  handleDrawEnd();\n  EoxDrawTool.requestUpdate();\n};\n\nexport default onDrawEndMethod;\n","/**\n * Initiates the drawing process by initializing the draw layer,\n * activating drawing, and updating the drawing status.\n *\n * @param {import(\"../../main\").EOxDrawTools} EoxDrawTool - The drawing tool instance.\n */\nconst startDrawingMethod = (EoxDrawTool) => {\n  // Function to initialize the drawing process\n  const initializeDrawing = () => {\n    EoxDrawTool.initDrawLayer();\n    EoxDrawTool.draw.setActive(true);\n  };\n\n  // Function to update the drawing status and request an update\n  const updateDrawingStatus = () => {\n    EoxDrawTool.currentlyDrawing = true;\n    EoxDrawTool.requestUpdate();\n  };\n\n  // Initialize the drawing process\n  initializeDrawing();\n\n  // Update the drawing status\n  updateDrawingStatus();\n};\n\nexport default startDrawingMethod;\n","import { onDrawEndMethod } from \"./\";\n\n/**\n * Initializes the draw layer, interacts with the map, and returns map instances.\n *\n * @param {import(\"../../main\").EOxDrawTools} EoxDrawTool - The drawing tool instance.\n * @returns {{EoxMap: import(\"@eox/map/main\").EOxMap, OlMap: import(\"ol\").Map}} - The map instances.\n */\nconst initDrawLayerMethod = (EoxDrawTool) => {\n  const mapQuery = document.querySelector(EoxDrawTool.for);\n\n  const EoxMap = /** @type {import(\"@eox/map/main\").EOxMap} */ (mapQuery);\n  // @ts-ignore\n  const OlMap = EoxMap.map;\n\n  // @ts-ignore\n  EoxDrawTool.drawLayer = EoxMap.addOrUpdateLayer({\n    type: \"Vector\",\n    properties: {\n      id: \"drawLayer\",\n      layerControlHide: true,\n    },\n    source: {\n      type: \"Vector\",\n    },\n    // check if the drawInteraction has already been added before adding again\n    // TEMP/TODO: this should probably be done by the map in the addOrUpdateLayer method\n    ...(EoxMap.interactions[\"drawInteraction\"]\n      ? {}\n      : {\n          interactions: [\n            {\n              type: \"draw\",\n              options: {\n                active: false,\n                id: \"drawInteraction\",\n                type: EoxDrawTool.type,\n                modify: EoxDrawTool.allowModify,\n                stopClick: true,\n              },\n            },\n            {\n              type: \"select\",\n              options: {\n                id: \"selectHover\",\n                condition: \"pointermove\",\n                style: {\n                  \"fill-color\": \"rgba(51, 153, 204,0.5)\",\n                  \"stroke-color\": \"#3399CC\",\n                  \"stroke-width\": 2.5,\n                },\n              },\n            },\n            {\n              type: \"select\",\n              options: {\n                id: \"selectClick\",\n                condition: \"click\",\n                panIn: true,\n                style: {\n                  \"fill-color\": \"rgba(51, 153, 204,0.5)\",\n                  \"stroke-color\": \"#3399CC\",\n                  \"stroke-width\": 2.5,\n                },\n              },\n            },\n          ],\n        }),\n  });\n\n  EoxDrawTool.draw = /** @type {import(\"ol/interaction\").Draw} */ (\n    /** @type {unknown} */ (EoxMap.interactions[\"drawInteraction\"])\n  );\n  EoxDrawTool.modify = /** @type {import(\"ol/interaction\").Modify} */ (\n    /** @type {unknown} */ (EoxMap.interactions[\"drawInteractionmodify\"])\n  );\n  EoxDrawTool.draw?.on(\"drawend\", () => onDrawEndMethod(EoxDrawTool));\n  EoxDrawTool.modify?.on(\"modifyend\", () => EoxDrawTool.emitDrawnFeatures());\n\n  return { EoxMap, OlMap };\n};\n\nexport default initDrawLayerMethod;\n","/**\n * Discards drawing on the map, resets drawing interactions and features,\n * clears the source, and triggers updates.\n *\n * @param {import(\"../../main\").EOxDrawTools} EoxDrawTool - The drawing tool instance.\n * @param {import(\"../../../../map/main\").EOxMap} EoxMap - The map instance.\n * @param {import(\"ol\").Map} OlMap - The OL map instance.\n */\nconst discardDrawingMethod = (EoxDrawTool, EoxMap, OlMap) => {\n  // Function to discard drawing interactions and features\n  const discardDrawingActions = () => {\n    // Reset drawnFeatures, deactivate drawing, and clear drawLayer's source\n    EoxDrawTool.drawnFeatures = [];\n    EoxDrawTool.draw.setActive(false);\n    EoxDrawTool.drawLayer.getSource().clear();\n\n    // Remove draw interaction and drawLayer from the map\n    EoxMap.removeInteraction(\"drawInteraction\");\n    OlMap.removeLayer(EoxDrawTool.drawLayer);\n  };\n\n  // Function to trigger updates after discarding drawing\n  const triggerUpdates = () => {\n    EoxDrawTool.emitDrawnFeatures();\n    EoxDrawTool.currentlyDrawing = false;\n    EoxDrawTool.requestUpdate();\n  };\n\n  // Execute the discard actions and trigger updates\n  discardDrawingActions();\n  triggerUpdates();\n};\n\nexport default discardDrawingMethod;\n","/**\n * Emits drawn features after a timeout to allow updating drawn features.\n *\n * @param {import(\"../../main\").EOxDrawTools} EoxDrawTool - The drawing tool instance.\n * @param {Function} drawUpdateEvent - event to be triggered after drawFeature is updated\n */\nconst emitDrawnFeaturesMethod = (EoxDrawTool, drawUpdateEvent) => {\n  // Function to emit features after a timeout (ensures update)\n  const emitFeatures = () => {\n    // Update drawnFeatures with features from drawLayer's source\n    EoxDrawTool.drawnFeatures = EoxDrawTool.drawLayer.getSource().getFeatures();\n    EoxDrawTool.requestUpdate();\n\n    // Triggering `drawupdate` event after drawFeature is updated\n    drawUpdateEvent();\n  };\n\n  // Emit features after a timeout (ensures update)\n  setTimeout(emitFeatures, 0);\n};\n\nexport default emitDrawnFeaturesMethod;\n","import { LitElement, html, nothing } from \"lit\";\nimport \"./components/list\";\nimport \"./components/controller\";\nimport { style } from \"./style\";\nimport { styleEOX } from \"./style.eox\";\nimport {\n  onDrawEndMethod,\n  startDrawingMethod,\n  initDrawLayerMethod,\n  discardDrawingMethod,\n  emitDrawnFeaturesMethod,\n} from \"./methods/draw\";\n\n/**\n * Manage drawn features on a map\n * Define EOxDrawTools class extending LitElement\n *\n * @element eox-drawtools\n */\nexport class EOxDrawTools extends LitElement {\n  // Define properties with defaults and types\n  static get properties() {\n    return {\n      allowModify: { attribute: \"allow-modify\", type: Boolean },\n      for: { type: String },\n      currentlyDrawing: { attribute: false, state: true, type: Boolean },\n      draw: { attribute: false, state: true },\n      drawLayer: { attribute: false, state: true },\n      drawnFeatures: { attribute: false, state: true, type: Array },\n      modify: { attribute: false, state: true },\n      multipleFeatures: { attribute: \"multiple-features\", type: Boolean },\n      showList: { attribute: \"show-list\", type: Boolean },\n      type: { type: String },\n      unstyled: { type: Boolean },\n    };\n  }\n\n  /**\n   * @type import(\"../../map/main\").EOxMap\n   */\n  #eoxMap;\n\n  /**\n   * @type import(\"ol\").Map\n   */\n  #olMap;\n\n  constructor() {\n    super();\n\n    /**\n     * Allow modifying the drawn feature(s)\n     */\n    this.allowModify = false;\n\n    /**\n     * The query selector for the map\n     * @default eox-map\n     */\n    this.for = \"eox-map\";\n\n    /**\n     * Whether the user is currently in the process of drawing or not\n     */\n    this.currentlyDrawing = false;\n\n    /**\n     * The current native OpenLayers `draw` interaction\n     * @type import(\"ol/interaction\").Draw\n     */\n\n    this.draw = null;\n\n    /**\n     * The current native OpenLayers draw `layer`\n     * @type import(\"ol/layer\").Vector<import(\"ol/source\").Vector>\n     */\n\n    this.drawLayer = null;\n\n    /**\n     * The array of drawn native OpenLayers features. Normally includes only one feature, until multiple feature drawing is enabled.\n     * @type Array<import(\"ol\").Feature>\n     */\n    this.drawnFeatures = [];\n\n    /**\n     * The current native OpenLayers `modify` interaction\n     * @type import(\"ol/interaction\").Modify\n     */\n\n    this.modify = null;\n\n    /**\n     * Allow adding more than one feature at a time\n     */\n    this.multipleFeatures = false;\n\n    /**\n     * Show list of features\n     */\n    this.showList = false;\n\n    /**\n     * Type of the drawn feature\n     * @type {\"Polygon\" | \"Point\" | \"LineString\" | \"Circle\" | \"Box\"}\n     */\n    this.type = \"Polygon\";\n\n    /**\n     * Render the element without additional styles\n     */\n    this.unstyled = false;\n  }\n\n  /**\n   * Initializes the drawing layer before starting to draw on the map.\n   */\n  initDrawLayer() {\n    const { EoxMap, OlMap } = initDrawLayerMethod(this);\n    (this.#eoxMap = EoxMap), (this.#olMap = OlMap);\n  }\n\n  /**\n   * @onClick Event handler triggered to start drawing on the map.\n   */\n  handleStartDrawing() {\n    startDrawingMethod(this);\n  }\n\n  /**\n   * @onClick Event handler triggered to discard/stop drawing\n   * on the map and delete the drawn shapes.\n   */\n  handleDiscardDrawing() {\n    discardDrawingMethod(this, this.#eoxMap, this.#olMap);\n  }\n\n  /**\n   * @event onDrawEnd triggered when the drawing of a shape is completed.\n   */\n  onDrawEnd() {\n    onDrawEndMethod(this);\n  }\n\n  /**\n   * @event onModifyEnd triggered when the modification of a shape is completed.\n   */\n  onModifyEnd() {\n    this.emitDrawnFeatures();\n  }\n\n  /**\n   * Triggers different events when the drawing of a shape is completed.\n   */\n  emitDrawnFeatures() {\n    const drawUpdateEvent = () => {\n      /**\n       * Fires whenever features are added, modified or discarded, where the event detail\n       * is the `drawnFeatures` array\n       * @type Array<import(\"ol\").Feature>\n       */\n      this.dispatchEvent(\n        new CustomEvent(\"drawupdate\", { detail: this.drawnFeatures })\n      );\n    };\n    emitDrawnFeaturesMethod(this, drawUpdateEvent);\n  }\n\n  // Render method for UI display\n  render() {\n    return html`\n      <style>\n        ${style}\n        ${!this.unstyled && styleEOX}\n      </style>\n\n      <!-- Controller Component -->\n      <eox-drawtools-controller\n        .drawFunc=${{\n          start: () => this.handleStartDrawing(),\n          discard: () => this.handleDiscardDrawing(),\n        }}\n        .unstyled=${this.unstyled}\n        .drawnFeatures=${this.drawnFeatures}\n        .currentlyDrawing=${this.currentlyDrawing}\n        .multipleFeatures=${this.multipleFeatures}\n      ></eox-drawtools-controller>\n\n      <!-- List Component -->\n      ${this.showList && this.drawnFeatures?.length\n        ? html`<eox-drawtools-list\n            .eoxMap=${this.#eoxMap}\n            .olMap=${this.#olMap}\n            .draw=${this.draw}\n            .drawLayer=${this.drawLayer}\n            .drawnFeatures=${this.drawnFeatures}\n            .modify=${this.modify}\n            .unstyled=${this.unstyled}\n            @changed=${() => this.requestUpdate()}\n          ></eox-drawtools-list>`\n        : nothing}\n    `;\n  }\n}\n\ncustomElements.define(\"eox-drawtools\", EOxDrawTools);\n","/**\n * Primary component demonstrating the configuration options for eox-drawtools on an eox-map.\n * It showcases the settings for allowModify, multipleFeatures, and type properties.\n */\nimport { html } from \"lit\";\nimport \"../../map/main\";\nimport \"../src/main\";\nimport { STORIES_LAYERS_ARRAY, STORIES_MAP_STYLE } from \"../src/enums\";\n\nexport const Primary = {\n  args: {\n    allowModify: false,\n    multipleFeatures: false,\n    type: \"Polygon\",\n  },\n  render: (args) => html`\n    <!-- Render eox-map component with ID \"primary\" -->\n    <eox-map\n      id=\"primary\"\n      style=${STORIES_MAP_STYLE}\n      .layers=${STORIES_LAYERS_ARRAY}\n    ></eox-map>\n\n    <!-- Initialize eox-drawtools for the eox-map with ID \"primary\" -->\n    <eox-drawtools\n      for=\"eox-map#primary\"\n      .allowModify=${args.allowModify}\n      .multipleFeatures=${args.multipleFeatures}\n      .type=${args.type}\n    />\n  `,\n};\n\nexport default Primary;\n","import { html } from \"lit\";\nimport \"../../map/main\";\nimport \"../src/main\";\nimport {\n  STORIES_MAP_STYLE,\n  STORIES_DRAW_TYPES,\n  STORIES_LAYERS_ARRAY,\n} from \"../src/enums\";\n\n/**\n * Component demonstrating how `DrawType` component generates a set of map instances with different drawing capabilities,\n * allowing users to visualize and interact with various drawing tools supported by the eox-drawtools module.\n */\nexport const DrawType = {\n  render: () => html`\n    <!-- Render a collection of map instances with different drawing types -->\n    <div style=\"display: flex\">\n      <!-- Iterating over different drawing types -->\n      ${STORIES_DRAW_TYPES.map(\n        ({ id, type }) => html`\n          <div>\n            <!-- Displaying an instance of eox-map -->\n            <eox-map\n              id=${id}\n              style=${STORIES_MAP_STYLE}\n              .layers=${STORIES_LAYERS_ARRAY}\n            />\n            <!-- Displaying the current drawing type -->\n            ${type}\n            <!-- Configuring eox-drawtools with specified parameters -->\n            <eox-drawtools\n              for=\"eox-map#${id}\"\n              multiple-features\n              allow-modify\n              type=\"${type}\"\n            />\n          </div>\n        `\n      )}\n    </div>\n  `,\n};\n\nexport default DrawType;\n","/**\n * Component demonstrating the ability to draw multiple polygons on an eox-map.\n * The eox-drawtools component is configured with the `multiple-features` attribute/property set\n * to enable the drawing of multiple polygons.\n */\nimport { html } from \"lit\";\nimport \"../../map/main\";\nimport \"../src/main\";\nimport { STORIES_LAYERS_ARRAY, STORIES_MAP_STYLE } from \"../src/enums\";\n\nexport const MultiPolygon = {\n  render: () => html`\n    <!-- Render eox-map component with ID \"multi\" -->\n    <eox-map\n      id=\"multi\"\n      style=${STORIES_MAP_STYLE}\n      .layers=${STORIES_LAYERS_ARRAY}\n    ></eox-map>\n\n    <!-- Initialize eox-drawtools for the eox-map with ID \"multi\" -->\n    <eox-drawtools for=\"eox-map#multi\" multiple-features />\n  `,\n};\n\nexport default MultiPolygon;\n","/**\n * Component demonstrating the capability to modify features after drawing on the eox-map.\n * This component exhibits the usage of eox-drawtools with allow-modify attribute/property\n * set to enable the modification functionality for the drawn features on the map.\n */\nimport { html } from \"lit\";\nimport \"../../map/main\";\nimport \"../src/main\";\nimport { STORIES_LAYERS_ARRAY, STORIES_MAP_STYLE } from \"../src/enums\";\n\nexport const ModifyFeatures = {\n  render: () => html`\n    <!-- Render eox-map component with ID \"modify\" -->\n    <eox-map\n      id=\"modify\"\n      style=${STORIES_MAP_STYLE}\n      .layers=${STORIES_LAYERS_ARRAY}\n    ></eox-map>\n\n    <!-- Initialize eox-drawtools for the eox-map with ID \"modify\" -->\n    <eox-drawtools for=\"eox-map#modify\" multiple-features allow-modify />\n  `,\n};\n\nexport default ModifyFeatures;\n","/**\n * Component demonstrating the display of a list of features on the eox-map.\n * This component showcases the usage of eox-drawtools with the `show-list` attribute/property set\n * to display a list of features corresponding to drawn polygons on the map.\n */\nimport { html } from \"lit\";\nimport \"../../map/main\";\nimport \"../src/main\";\nimport { STORIES_LAYERS_ARRAY, STORIES_MAP_STYLE } from \"../src/enums\";\n\nexport const MultiPolygonWithList = {\n  render: () => html`\n    <!-- Render eox-map component with ID \"list\" -->\n    <div style=\"display: flex\">\n      <eox-map\n        id=\"list\"\n        style=${STORIES_MAP_STYLE}\n        .layers=${STORIES_LAYERS_ARRAY}\n      ></eox-map>\n\n      <!-- Initialize eox-drawtools for the eox-map with ID \"list\" -->\n      <eox-drawtools\n        for=\"eox-map#list\"\n        layer=\"draw\"\n        multiple-features\n        show-list\n      ></eox-drawtools>\n    </div>\n  `,\n};\n\nexport default MultiPolygonWithList;\n"],"names":["i","t","e","r","s","styleEOX","button","firstUpdatedMethod","EoxDrawToolList","handleInteractionStyleChange","hoverFeatureMethod","featureId","mouseOut","featuresToHighlight","deleteFeatureMethod","evt","index","feature","STORIES_LAYERS_ARRAY","STORIES_MAP_STYLE","STORIES_DRAW_TYPES","FIT_OPTIONS","selectAndDeselectFeature","selectedFeatureId","clickId","drawLayer","olMap","clickInteraction","isSelectedFeature","featureGeometry","newExtent","featureExtent","EOxDrawToolsList","LitElement","__publicField","selectAndDeselectFeatureMethod","_a","_b","html","featureNumber","isFeatureHovered","isFeatureClicked","keyed","nothing","updateButtonStatesMethod","EoxDrawToolController","multipleFeatures","drawnFeatures","currentlyDrawing","drawDisabled","discardDisabled","EOxDrawToolsController","__privateAdd","_drawDisabled","_discardDisabled","__privateSet","drawLabel","__privateGet","style","onDrawEndMethod","EoxDrawTool","startDrawingMethod","initializeDrawing","updateDrawingStatus","initDrawLayerMethod","EoxMap","OlMap","discardDrawingMethod","discardDrawingActions","triggerUpdates","emitDrawnFeaturesMethod","drawUpdateEvent","EOxDrawTools","_eoxMap","_olMap","Primary","args","DrawType","id","type","MultiPolygon","ModifyFeatures","MultiPolygonWithList"],"mappings":"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","x_google_ignoreList":[0]}